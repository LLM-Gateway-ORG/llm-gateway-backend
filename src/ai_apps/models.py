import uuid
from django.db import models
from base.models import BaseModel
from typing import Any, Dict
from authentication.models import AuthUser
from django.contrib.postgres.fields import ArrayField


class Apps(BaseModel):
    """
    Represents an application owned by a user.
    """

    id: uuid.UUID = models.UUIDField(
        primary_key=True,
        default=uuid.uuid4,
        editable=False,
        help_text="Unique ID for the app",
    )
    name: str = models.CharField(
        max_length=255,
        help_text="Name of the application",
    )
    user: AuthUser = models.ForeignKey(
        AuthUser,
        on_delete=models.CASCADE,
        related_name="apps",
    )
    feature_type: str = models.CharField(
        max_length=50,
        choices=(
            ("webui", "Web UI"),
            ("sdk", "SDK"),
        ),
        help_text="Type of the feature configuration",
    )
    config: Dict[str, Any] = models.JSONField(
        default=dict,
        help_text="JSON configuration for the feature (e.g., theme, API limits)",
    )

    supported_models = ArrayField(
        models.CharField(max_length=100),
        default=list,
        blank=True,
        help_text="List of supported models (e.g., ['GPT-3.5', 'GPT-4'])",
    )


    def __str__(self):
        return self.name


class AppUsers(BaseModel):
    """
    Users specific to an application, with autogenerated credentials.
    """

    app = models.ForeignKey(Apps, on_delete=models.CASCADE, related_name="app_users")
    auth_provider = models.CharField(max_length=20, default="email")
    email = models.EmailField(
        unique=True, help_text="Autogenerated email for the app user"
    )
    password = models.CharField(
        max_length=128, help_text="Encrypted password for the app user"
    )  # Use Django's `make_password` for hashing
    first_name = models.CharField(max_length=50, help_text="First name of the app user")
    last_name = models.CharField(max_length=50, help_text="Last name of the app user")

    class Meta:
        unique_together = ("app", "email")  # Ensure unique app-specific users

    def save(self, *args, **kwargs):
        if not self.pk:  # If creating a new instance
            from django.contrib.auth.hashers import make_password

            self.password = make_password(self.password)  # Hash password on creation
        super().save(*args, **kwargs)

    def __str__(self):
        return f"{self.first_name} {self.last_name} ({self.email})"
